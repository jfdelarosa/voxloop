// This is a sample model to get you started.
// Learn how to model you app: https://zenstack.dev/#/modeling-your-app.

/**
 * A sample data source using local sqlite db.
 * See how to use a different db: https://zenstack.dev/#/zmodel-data-source.
 */
datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

plugin trpc {
    provider = '@zenstackhq/trpc'
    output = 'src/server/routers/generated'
}

plugin zod {
    provider = '@core/zod'
}


abstract model Base {
    createdAt DateTime @default(now())
    updatedAt DateTime? @updatedAt()
    publishedAt DateTime? @default(now())
    published Boolean @default(false)
}

model User extends Base {
    id String @id @default(cuid())
    email String @unique @email
    emailVerified DateTime?
    password String? @password @omit
    name String?
    image String? @url

    account Account[]
    session Session[]
    posts Post[]
    comments Comment[]
    votes Vote[]

    // open to signup
    @@allow('create', true)

    // Anyone can read
    @@allow('read', true)

    // full access by oneself
    @@allow('all', auth() == this)
}

model Account {
    id String @id @default(cuid())
    type String
    provider String
    providerAccountId String
    token_type String?
    refresh_token String?
    access_token String?
    id_token String?
    scope String?
    session_state String?
    expires_at Int?

    user User @relation(fields: [userId], references: [id])
    userId String

    @@unique([provider, providerAccountId])

    @@allow('all', true)
}

model Session {
    id String @id @default(cuid())
    sessionToken String @unique
    expires DateTime

    user User @relation(fields: [userId], references: [id])
    userId String

    @@allow('all', true)
}

model VerificationToken {
    identifier String
    token String @unique
    expires DateTime

    @@unique([identifier, token])

    @@allow('all', true)
}

model Post extends Base {
    id String @id @default(cuid())
    title String
    content String?

    author User @relation(fields: [authorId], references: [id])
    authorId String

    comments Comment[]
    votes Vote[]

    // Anyone can create
    @@allow('create', true)

    // Anyone can read
    @@allow('read', published)

    // full access by author
    @@allow('all', author == auth())
}

model Vote extends Base {
    id String @id @default(cuid())

    post Post @relation(fields: [postId], references: [id])
    postId String

    user User @relation(fields: [userId], references: [id])
    userId String

    // Anyone can create
    @@allow('create', true)

    // Anyone can read
    @@allow('read', true)

    // full access by user
    @@allow('all', user == auth())
}

model Comment extends Base {
    id String @id @default(cuid())
    content String

    author User @relation(fields: [authorId], references: [id])
    authorId String

    post Post @relation(fields: [postId], references: [id])
    postId String

    // Anyone can create
    @@allow('create', true)
    
    // Anyone can read
    @@allow('read', published)

    // full access by author
    @@allow('all', author == auth())
}
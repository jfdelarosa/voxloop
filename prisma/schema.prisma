//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider="postgresql"
    url=env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

/// @@allow('create', true)
/// @@allow('read', true)
/// @@allow('all', auth() == this)
model User {
    id String @id() @default(cuid())
    /// @email
    email String @unique()
    emailVerified DateTime?
    /// @password
    /// @omit
    password String?
    name String?
    /// @url
    image String?
    account Account[]
    session Session[]
    posts Post[]
    comments Comment[]
    votes Vote[]
}

/// @@allow('all', true)
model Account {
    id String @id() @default(cuid())
    type String
    provider String
    providerAccountId String
    token_type String?
    refresh_token String?
    access_token String?
    id_token String?
    scope String?
    session_state String?
    expires_at Int?
    user User @relation(fields: [userId], references: [id])
    userId String

    @@unique([provider, providerAccountId])
}

/// @@allow('all', true)
model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    expires DateTime
    user User @relation(fields: [userId], references: [id])
    userId String
}

/// @@allow('all', true)
model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime

    @@unique([identifier, token])
}

/// @@allow('create', true)
/// @@allow('read', published)
/// @@allow('all', author == auth())
model Post {
    id String @id() @default(cuid())
    title String
    content String?
    published Boolean @default(false)
    author User @relation(fields: [authorId], references: [id])
    authorId String
    comments Comment[]
    votes Vote[]
}

/// @@allow('create', true)
/// @@allow('read', true)
/// @@allow('all', user == auth())
model Vote {
    id String @id() @default(cuid())
    post Post @relation(fields: [postId], references: [id])
    postId String
    user User @relation(fields: [userId], references: [id])
    userId String
}

/// @@allow('create', true)
/// @@allow('read', published)
/// @@allow('all', author == auth())
model Comment {
    id String @id() @default(cuid())
    content String
    published Boolean @default(false)
    author User @relation(fields: [authorId], references: [id])
    authorId String
    post Post @relation(fields: [postId], references: [id])
    postId String
}